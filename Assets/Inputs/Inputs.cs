//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Inputs/Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Inputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Inputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Inputs"",
    ""maps"": [
        {
            ""name"": ""Gameplays"",
            ""id"": ""a07181c0-2767-4072-a461-6ccf63efd2cb"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""c7b9e5ba-e6cd-4eb9-a649-a6af3b578607"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gun 1"",
                    ""type"": ""Button"",
                    ""id"": ""994fe70d-5477-4e53-b0a7-733458d56a50"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gun 2"",
                    ""type"": ""Button"",
                    ""id"": ""2a970f7d-1180-4a33-a0b2-d4e932b0aa01"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a6c9b678-84fe-440e-ab75-a540be60b47b"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ffcdd62b-0b85-43bf-b059-a4f5c4619522"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gun 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""187020d4-c70b-45e0-9882-27ed9d73bd09"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gun 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplays
        m_Gameplays = asset.FindActionMap("Gameplays", throwIfNotFound: true);
        m_Gameplays_Shoot = m_Gameplays.FindAction("Shoot", throwIfNotFound: true);
        m_Gameplays_Gun1 = m_Gameplays.FindAction("Gun 1", throwIfNotFound: true);
        m_Gameplays_Gun2 = m_Gameplays.FindAction("Gun 2", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplays
    private readonly InputActionMap m_Gameplays;
    private IGameplaysActions m_GameplaysActionsCallbackInterface;
    private readonly InputAction m_Gameplays_Shoot;
    private readonly InputAction m_Gameplays_Gun1;
    private readonly InputAction m_Gameplays_Gun2;
    public struct GameplaysActions
    {
        private @Inputs m_Wrapper;
        public GameplaysActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_Gameplays_Shoot;
        public InputAction @Gun1 => m_Wrapper.m_Gameplays_Gun1;
        public InputAction @Gun2 => m_Wrapper.m_Gameplays_Gun2;
        public InputActionMap Get() { return m_Wrapper.m_Gameplays; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplaysActions set) { return set.Get(); }
        public void SetCallbacks(IGameplaysActions instance)
        {
            if (m_Wrapper.m_GameplaysActionsCallbackInterface != null)
            {
                @Shoot.started -= m_Wrapper.m_GameplaysActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_GameplaysActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_GameplaysActionsCallbackInterface.OnShoot;
                @Gun1.started -= m_Wrapper.m_GameplaysActionsCallbackInterface.OnGun1;
                @Gun1.performed -= m_Wrapper.m_GameplaysActionsCallbackInterface.OnGun1;
                @Gun1.canceled -= m_Wrapper.m_GameplaysActionsCallbackInterface.OnGun1;
                @Gun2.started -= m_Wrapper.m_GameplaysActionsCallbackInterface.OnGun2;
                @Gun2.performed -= m_Wrapper.m_GameplaysActionsCallbackInterface.OnGun2;
                @Gun2.canceled -= m_Wrapper.m_GameplaysActionsCallbackInterface.OnGun2;
            }
            m_Wrapper.m_GameplaysActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @Gun1.started += instance.OnGun1;
                @Gun1.performed += instance.OnGun1;
                @Gun1.canceled += instance.OnGun1;
                @Gun2.started += instance.OnGun2;
                @Gun2.performed += instance.OnGun2;
                @Gun2.canceled += instance.OnGun2;
            }
        }
    }
    public GameplaysActions @Gameplays => new GameplaysActions(this);
    public interface IGameplaysActions
    {
        void OnShoot(InputAction.CallbackContext context);
        void OnGun1(InputAction.CallbackContext context);
        void OnGun2(InputAction.CallbackContext context);
    }
}
